#!/usr/bin/env python3
"""
test_indicators.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
–ó–∞–ø—É—Å–∫: python test_indicators.py
"""
import sys
from indicators import (
    ema, sma, rsi, macd, bollinger_bands, 
    volume_strength, atr, calculate_tp_sl
)

def test_ema():
    """–¢–µ—Å—Ç EMA"""
    print("üß™ –¢–µ—Å—Ç EMA...")
    closes = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
    result = ema(closes, 9)
    
    assert result is not None, "EMA –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å None"
    assert 100 < result < 120, f"EMA –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {result}"
    print(f"   ‚úÖ EMA(9) = {result:.2f}")

def test_rsi():
    """–¢–µ—Å—Ç RSI"""
    print("üß™ –¢–µ—Å—Ç RSI...")
    # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    closes = list(range(50, 80))
    result = rsi(closes, 14)
    
    assert result is not None, "RSI –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert 0 <= result <= 100, f"RSI –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-100: {result}"
    assert result > 50, "RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 50 –Ω–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"
    print(f"   ‚úÖ RSI(14) = {result:.1f}")

def test_macd():
    """–¢–µ—Å—Ç MACD"""
    print("üß™ –¢–µ—Å—Ç MACD...")
    closes = list(range(100, 160))
    result = macd(closes)
    
    assert result is not None, "MACD –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    macd_line, signal_line, histogram = result
    assert histogram == macd_line - signal_line, "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ = MACD - Signal"
    print(f"   ‚úÖ MACD = {macd_line:.2f}, Signal = {signal_line:.2f}, Hist = {histogram:.2f}")

def test_bollinger_bands():
    """–¢–µ—Å—Ç Bollinger Bands"""
    print("üß™ –¢–µ—Å—Ç Bollinger Bands...")
    closes = [100] * 20 + [105, 110, 115]  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –ø–æ—Ç–æ–º —Ä–æ—Å—Ç
    result = bollinger_bands(closes)
    
    assert result is not None, "BB –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    upper, middle, lower = result
    assert upper > middle > lower, "Upper > Middle > Lower"
    print(f"   ‚úÖ BB: Upper={upper:.2f}, Middle={middle:.2f}, Lower={lower:.2f}")

def test_volume_strength():
    """–¢–µ—Å—Ç Volume Strength"""
    print("üß™ –¢–µ—Å—Ç Volume Strength...")
    candles = [{"v": 1000} for _ in range(20)]
    candles.append({"v": 3000})  # –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –æ–±—ä—ë–º–∞
    
    result = volume_strength(candles, 20)
    assert result is not None, "Volume strength –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert result > 2.5, f"Volume strength –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 2.5 (—Ç–µ–∫—É—â–∏–π: {result:.2f})"
    print(f"   ‚úÖ Volume Strength = {result:.1f}x")

def test_atr():
    """–¢–µ—Å—Ç ATR"""
    print("üß™ –¢–µ—Å—Ç ATR...")
    candles = [
        {"h": 105, "l": 95, "c": 100},
        {"h": 110, "l": 100, "c": 105},
        {"h": 115, "l": 105, "c": 110},
    ] * 5  # 15 —Å–≤–µ—á–µ–π
    
    result = atr(candles, 14)
    assert result is not None, "ATR –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert result > 0, "ATR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
    print(f"   ‚úÖ ATR(14) = {result:.2f}")

def test_calculate_tp_sl():
    """–¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ TP/SL"""
    print("üß™ –¢–µ—Å—Ç TP/SL...")
    
    # LONG –ø–æ–∑–∏—Ü–∏—è
    entry = 100.0
    atr_val = 2.0
    result = calculate_tp_sl(entry, "LONG", atr_val)
    
    assert result["stop_loss"] < entry, "SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –≤—Ö–æ–¥–∞ –¥–ª—è LONG"
    assert result["take_profit_1"] > entry, "TP1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –≤—Ö–æ–¥–∞ –¥–ª—è LONG"
    assert result["take_profit_2"] > result["take_profit_1"], "TP2 > TP1"
    assert result["take_profit_3"] > result["take_profit_2"], "TP3 > TP2"
    
    print(f"   ‚úÖ LONG @ {entry}")
    print(f"      SL:  {result['stop_loss']:.2f} (-{result['sl_percent']:.2f}%)")
    print(f"      TP1: {result['take_profit_1']:.2f} (+{result['tp1_percent']:.2f}%)")
    print(f"      TP2: {result['take_profit_2']:.2f} (+{result['tp2_percent']:.2f}%)")
    print(f"      TP3: {result['take_profit_3']:.2f} (+{result['tp3_percent']:.2f}%)")
    
    # SHORT –ø–æ–∑–∏—Ü–∏—è
    result = calculate_tp_sl(entry, "SHORT", atr_val)
    assert result["stop_loss"] > entry, "SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –≤—Ö–æ–¥–∞ –¥–ª—è SHORT"
    assert result["take_profit_1"] < entry, "TP1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –≤—Ö–æ–¥–∞ –¥–ª—è SHORT"
    print(f"   ‚úÖ SHORT @ {entry}")
    print(f"      SL:  {result['stop_loss']:.2f} (+{result['sl_percent']:.2f}%)")
    print(f"      TP1: {result['take_profit_1']:.2f} (-{result['tp1_percent']:.2f}%)")

def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("=" * 50)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    print()
    
    tests = [
        test_ema,
        test_rsi,
        test_macd,
        test_bollinger_bands,
        test_volume_strength,
        test_atr,
        test_calculate_tp_sl
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            passed += 1
        except AssertionError as e:
            print(f"   ‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            failed += 1
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            failed += 1
        print()
    
    print("=" * 50)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print("=" * 50)
    
    return failed == 0

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)