#!/usr/bin/env python3
"""
check_render.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render
–ó–∞–ø—É—Å–∫: python check_render.py
"""
import os
import sys

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    
    if version.major == 3 and version.minor == 11:
        print(f"  ‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    elif version.major == 3 and version.minor >= 8:
        print(f"  ‚ö†Ô∏è  Python {version.major}.{version.minor}.{version.micro} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.11.9)")
        return True
    else:
        print(f"  ‚ùå Python {version.major}.{version.minor}.{version.micro} (–Ω—É–∂–Ω–∞ –º–∏–Ω–∏–º—É–º 3.8)")
        return False

def check_file(filename, required=True):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        print(f"‚úÖ {filename} –Ω–∞–π–¥–µ–Ω")
        return True
    else:
        status = "‚ùå" if required else "‚ö†Ô∏è "
        print(f"{status} {filename} {'–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if required else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'}")
        return not required

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å requirements.txt"""
    if not os.path.exists("requirements.txt"):
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open("requirements.txt") as f:
        content = f.read()
        required = ["aiogram", "aiosqlite", "httpx"]
        
        for pkg in required:
            if pkg in content:
                print(f"  ‚úÖ {pkg} —É–∫–∞–∑–∞–Ω")
            else:
                print(f"  ‚ùå {pkg} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
    
    return True

def check_env_example():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å .env.example"""
    if not os.path.exists(".env.example"):
        print("‚ö†Ô∏è  .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True
    
    with open(".env.example") as f:
        content = f.read()
        required = ["BOT_TOKEN", "ADMIN_IDS"]
        
        for var in required:
            if var in content:
                print(f"  ‚úÖ {var} –≤ –ø—Ä–∏–º–µ—Ä–µ")
            else:
                print(f"  ‚ö†Ô∏è  {var} –Ω–µ –≤ –ø—Ä–∏–º–µ—Ä–µ")
    
    return True

def check_gitignore():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å .gitignore"""
    if not os.path.exists(".gitignore"):
        print("‚ö†Ô∏è  .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–π –µ–≥–æ!")
        return False
    
    with open(".gitignore") as f:
        content = f.read()
        important = [".env", "*.db"]
        
        for item in important:
            if item in content:
                print(f"  ‚úÖ {item} –∏—Å–∫–ª—é—á—ë–Ω")
            else:
                print(f"  ‚ùå {item} –ù–ï –∏—Å–∫–ª—é—á—ë–Ω (–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Ç–µ—á–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤!)")
                return False
    
    return True

def check_secrets():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –≤ –∫–æ–¥–µ"""
    files_to_check = ["main.py", "config.py", "handlers.py"]
    
    dangerous_patterns = [
        ("bot_token =", "—Ö–∞—Ä–¥–∫–æ–¥ —Ç–æ–∫–µ–Ω–∞"),
        ("BOT_TOKEN =", "—Ö–∞—Ä–¥–∫–æ–¥ —Ç–æ–∫–µ–Ω–∞"),
        ("admin_ids =", "—Ö–∞—Ä–¥–∫–æ–¥ –∞–¥–º–∏–Ω–æ–≤"),
    ]
    
    found_issues = False
    
    for filename in files_to_check:
        if not os.path.exists(filename):
            continue
        
        with open(filename) as f:
            content = f.read().lower()
            
            for pattern, description in dangerous_patterns:
                if pattern.lower() in content and "os.getenv" not in content[max(0, content.find(pattern.lower())-50):content.find(pattern.lower())+50]:
                    print(f"  ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–µ–Ω {description} –≤ {filename}")
                    found_issues = True
    
    if not found_issues:
        print(f"  ‚úÖ –°–µ–∫—Ä–µ—Ç—ã –Ω–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã")
    
    return not found_issues

def main():
    print("=" * 60)
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render")
    print("=" * 60)
    print()
    
    checks = []
    
    # –í–µ—Ä—Å–∏—è Python
    checks.append(check_python_version())
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    checks.append(check_file("main.py"))
    checks.append(check_file("config.py"))
    checks.append(check_file("database.py"))
    checks.append(check_file("indicators.py"))
    checks.append(check_file("handlers.py"))
    checks.append(check_file("tasks.py"))
    print()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print("‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    checks.append(check_file("requirements.txt"))
    checks.append(check_file("runtime.txt", required=False))
    checks.append(check_file("render.yaml", required=False))
    print()
    
    # Requirements
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    checks.append(check_requirements())
    print()
    
    # .env.example
    print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    checks.append(check_env_example())
    print()
    
    # .gitignore
    print("üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
    checks.append(check_gitignore())
    print()
    
    # –°–µ–∫—Ä–µ—Ç—ã
    print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    checks.append(check_secrets())
    print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("=" * 60)
    if all(checks):
        print("‚úÖ –í–°–Å –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ –ù–ê RENDER!")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. git add . && git commit -m 'Ready for Render'")
        print("2. git push origin main")
        print("3. –°–æ–∑–¥–∞–π Web Service –Ω–∞ render.com")
        print("4. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN –∏ ADMIN_IDS")
        print("5. –ñ–¥–∏ ~2 –º–∏–Ω—É—Ç—ã –∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ!")
        print()
        print("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: RENDER_DEPLOY.md")
        sys.exit(0)
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - –ò–°–ü–†–ê–í–¨ –ò–• –ü–ï–†–ï–î –î–ï–ü–õ–û–ï–ú")
        print()
        print("üí° –ü—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: RENDER_DEPLOY.md")
        sys.exit(1)

if __name__ == "__main__":
    main()