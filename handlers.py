"""
handlers.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
"""
import time
import asyncio
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import ADMIN_IDS, SUPPORT_URL, t, BOT_NAME
from database import *
from indicators import fetch_price
import httpx

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
USER_STATES = {}

# ==================== HELPER FUNCTIONS ====================
def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

async def send_message_safe_local(bot, user_id: int, text: str, **kwargs):
    """–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è handlers"""
    from aiogram.utils.exceptions import RetryAfter, TelegramAPIError
    try:
        await bot.send_message(user_id, text, **kwargs)
        return True
    except RetryAfter as e:
        await asyncio.sleep(e.timeout)
        return await send_message_safe_local(bot, user_id, text, **kwargs)
    except TelegramAPIError:
        return False

# ==================== KEYBOARDS ====================
def main_menu_kb(is_admin_user: bool, is_paid_user: bool, lang: str = "ru"):
    kb = InlineKeyboardMarkup(row_width=2)
    if is_paid_user:
        kb.add(
            InlineKeyboardButton(t(lang, "btn_alerts"), callback_data="menu_alerts"),
            InlineKeyboardButton(t(lang, "btn_ref"), callback_data="menu_ref")
        )
    kb.add(
        InlineKeyboardButton(t(lang, "btn_guide"), callback_data="menu_guide"),
        InlineKeyboardButton(t(lang, "btn_support"), url=SUPPORT_URL)
    )
    if not is_paid_user:
        kb.add(InlineKeyboardButton(t(lang, "btn_unlock"), callback_data="menu_pay"))
    if is_admin_user:
        kb.add(InlineKeyboardButton(t(lang, "btn_admin"), callback_data="menu_admin"))
    kb.add(InlineKeyboardButton("üåê Language", callback_data="change_lang"))
    return kb

def alerts_kb(user_pairs: list, lang: str = "ru"):
    from config import DEFAULT_PAIRS
    kb = InlineKeyboardMarkup(row_width=2)
    for pair in DEFAULT_PAIRS:
        emoji = "‚úÖ" if pair in user_pairs else "‚ûï"
        kb.add(InlineKeyboardButton(f"{emoji} {pair}", callback_data=f"toggle_{pair}"))
    
    add_btn = "‚ûï –°–≤–æ—è –º–æ–Ω–µ—Ç–∞" if lang == "ru" else "‚ûï Custom coin"
    my_btn = "üìã –ú–æ–∏ –º–æ–Ω–µ—Ç—ã" if lang == "ru" else "üìã My coins"
    info_btn = "üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?" if lang == "ru" else "üí° How it works?"
    
    kb.add(
        InlineKeyboardButton(add_btn, callback_data="add_custom"),
        InlineKeyboardButton(my_btn, callback_data="my_pairs")
    )
    kb.add(InlineKeyboardButton(info_btn, callback_data="alerts_info"))
    kb.add(InlineKeyboardButton(t(lang, "btn_back"), callback_data="back_main"))
    return kb

def ref_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîó –ú–æ—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link"),
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="ref_balance")
    )
    kb.add(
        InlineKeyboardButton("üíé –í—ã–≤–æ–¥ (–∫—Ä–∏–ø—Ç–∞)", callback_data="ref_withdraw_crypto"),
        InlineKeyboardButton("‚≠ê –í—ã–≤–æ–¥ (Stars)", callback_data="ref_withdraw_stars")
    )
    kb.add(InlineKeyboardButton("üìñ –ì–∞–π–¥ –¥–ª—è —Ä–µ—Ñ–æ–≤", callback_data="ref_guide"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

def pay_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚≠ê –û–ø–ª–∞—Ç–∞ Stars", callback_data="pay_stars"),
        InlineKeyboardButton("üíé –ö—Ä–∏–ø—Ç–æ", callback_data="pay_crypto")
    )
    kb.add(InlineKeyboardButton("üéü –£ –º–µ–Ω—è –∫–æ–¥", callback_data="pay_code"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

def admin_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="adm_stats"),
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="adm_broadcast")
    )
    kb.add(
        InlineKeyboardButton("‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="adm_grant"),
        InlineKeyboardButton("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å", callback_data="adm_give")
    )
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

# ==================== SETUP HANDLERS ====================
def setup_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    
    # ==================== MAIN COMMANDS ====================
    @dp.message_handler(commands=["start"])
    async def cmd_start(message: types.Message):
        uid = message.from_user.id
        args = message.get_args()
        invited_by = int(args) if args and args.isdigit() and int(args) != uid else None
        
        conn = await db_pool.acquire()
        try:
            await conn.execute(
                "INSERT OR IGNORE INTO users(id, invited_by, created_ts) VALUES(?,?,?)",
                (uid, invited_by, int(time.time()))
            )
            await conn.commit()
        finally:
            await db_pool.release(conn)
        
        text = f"<b>üöÄ {BOT_NAME}</b>\n\n"
        text += "–¢–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º TP/SL\n\n"
        text += "‚Ä¢ 3-5 —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å\n"
        text += "‚Ä¢ –ú—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥–∏—è (5+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)\n"
        text += "‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥–∞\n\n"
        text += "üìñ –ñ–º–∏ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
        
        paid = await is_paid(uid)
        await message.answer(text, reply_markup=main_menu_kb(is_admin(uid), paid))
    
    # ==================== NAVIGATION ====================
    @dp.callback_query_handler(lambda c: c.data == "back_main")
    async def back_main(call: types.CallbackQuery):
        lang = await get_user_lang(call.from_user.id)
        paid = await is_paid(call.from_user.id)
        try:
            await call.message.edit_text(t(lang, "main_menu"), 
                                         reply_markup=main_menu_kb(is_admin(call.from_user.id), paid, lang))
        except:
            pass
        await call.answer()
    
    # ==================== ALERTS ====================
    @dp.callback_query_handler(lambda c: c.data == "menu_alerts")
    async def menu_alerts(call: types.CallbackQuery):
        uid = call.from_user.id
        lang = await get_user_lang(uid)
        
        if not await is_paid(uid):
            await call.answer(t(lang, "access_required"), show_alert=True)
            return
        
        pairs = await get_user_pairs(uid)
        
        if lang == "ru":
            text = f"üìà <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—ã (–¥–æ 10)\n\n–ê–∫—Ç–∏–≤–Ω–æ: {len(pairs)}/10"
        else:
            text = f"üìà <b>Manage Alerts</b>\n\nSelect coins (up to 10)\n\nActive: {len(pairs)}/10"
        
        await call.message.edit_text(text, reply_markup=alerts_kb(pairs, lang))
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data.startswith("toggle_"))
    async def toggle_pair(call: types.CallbackQuery):
        uid = call.from_user.id
        if not await is_paid(uid):
            await call.answer("–û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!", show_alert=True)
            return
        
        pair = call.data.split("_", 1)[1]
        pairs = await get_user_pairs(uid)
        
        if pair in pairs:
            await remove_user_pair(uid, pair)
            await call.answer(f"‚ùå {pair} —É–¥–∞–ª—ë–Ω")
        else:
            if len(pairs) >= 10:
                await call.answer("–ú–∞–∫—Å–∏–º—É–º 10 –º–æ–Ω–µ—Ç!", show_alert=True)
                return
            await add_user_pair(uid, pair)
            await call.answer(f"‚úÖ {pair} –¥–æ–±–∞–≤–ª–µ–Ω")
        
        await menu_alerts(call)
    
    @dp.callback_query_handler(lambda c: c.data == "add_custom")
    async def add_custom(call: types.CallbackQuery):
        uid = call.from_user.id
        pairs = await get_user_pairs(uid)
        if len(pairs) >= 10:
            await call.answer("–ú–∞–∫—Å–∏–º—É–º 10 –º–æ–Ω–µ—Ç!", show_alert=True)
            return
        USER_STATES[uid] = {"mode": "waiting_custom_pair"}
        text = "‚ûï –û—Ç–ø—Ä–∞–≤—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã\n–ü—Ä–∏–º–µ—Ä: <code>SOLUSDT</code>"
        lang = await get_user_lang(uid)
        await call.message.edit_text(text, reply_markup=alerts_kb(pairs, lang))
        await call.answer()
    
    @dp.message_handler(lambda m: USER_STATES.get(m.from_user.id, {}).get("mode") == "waiting_custom_pair")
    async def handle_custom_pair(message: types.Message):
        uid = message.from_user.id
        pair = message.text.strip().upper()
        
        if not pair.endswith("USDT") or len(pair) < 6:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: SOLUSDT")
            return
        
        async with httpx.AsyncClient() as client:
            price_data = await fetch_price(client, pair)
            if not price_data:
                await message.answer(f"‚ùå –ü–∞—Ä–∞ {pair} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        
        await add_user_pair(uid, pair)
        USER_STATES.pop(uid, None)
        await message.answer(f"‚úÖ {pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    
    @dp.callback_query_handler(lambda c: c.data == "my_pairs")
    async def my_pairs(call: types.CallbackQuery):
        pairs = await get_user_pairs(call.from_user.id)
        if not pairs:
            await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç", show_alert=True)
            return
        
        text = "üìã <b>–ú–æ–∏ –º–æ–Ω–µ—Ç—ã</b>\n\n" + "\n".join(f"‚Ä¢ {p}" for p in pairs)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="clear_all"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_alerts"))
        await call.message.edit_text(text, reply_markup=kb)
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "clear_all")
    async def clear_all(call: types.CallbackQuery):
        await clear_user_pairs(call.from_user.id)
        await call.answer("üóë –í—Å—ë —É–¥–∞–ª–µ–Ω–æ")
        await menu_alerts(call)
    
    @dp.callback_query_handler(lambda c: c.data == "alerts_info")
    async def alerts_info(call: types.CallbackQuery):
        lang = await get_user_lang(call.from_user.id)
        
        if lang == "ru":
            text = "üí° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–ª–µ—Ä—Ç—ã?</b>\n\n"
            text += "<b>1. –í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—ã</b>\n–ù–∞–∂–º–∏ –Ω–∞ –º–æ–Ω–µ—Ç—É —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.\n\n"
            text += "<b>2. –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫</b>\n7 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: EMA, RSI, MACD, BB, Volume, –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏, ATR\n\n"
            text += "<b>3. –ü–æ–ª—É—á–∞–µ—à—å —Å–∏–≥–Ω–∞–ª</b>\n–¢–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∏–ª–µ 85+ –±–∞–ª–ª–æ–≤\n\n"
            text += "<b>4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>\nüìç TP1 (15%) - –±—ã—Å—Ç—Ä–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è\nüìç TP2 (40%) - –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å\nüìç TP3 (80%) - –º–∞–∫—Å–∏–º—É–º —Ç—Ä–µ–Ω–¥–∞"
        else:
            text = "üí° <b>How Alerts Work?</b>\n\n"
            text += "<b>1. Select Coins</b>\nClick to add to tracking.\n\n"
            text += "<b>2. Bot Analyzes</b>\n7 indicators: EMA, RSI, MACD, BB, Volume, Divergences, ATR\n\n"
            text += "<b>3. Receive Signal</b>\nOnly when strength 85+ points\n\n"
            text += "<b>4. Management</b>\nüìç TP1 (15%) - quick profit\nüìç TP2 (40%) - main target\nüìç TP3 (80%) - max trend"
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(t(lang, "btn_back"), callback_data="menu_alerts"))
        try:
            await call.message.edit_text(text, reply_markup=kb)
        except:
            await call.message.answer(text, reply_markup=kb)
        await call.answer()
    
    # ==================== PAYMENT ====================
    @dp.callback_query_handler(lambda c: c.data == "menu_pay")
    async def menu_pay(call: types.CallbackQuery):
        text = "üîí <b>–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø</b>\n\n"
        text += "‚úÖ 3-5 —Ç–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å\n"
        text += "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π TP/SL\n"
        text += "‚úÖ –ú—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
        text += "‚úÖ –î–æ 10 –º–æ–Ω–µ—Ç\n"
        text += "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ 50%"
        await call.message.edit_text(text, reply_markup=pay_kb())
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "pay_stars")
    async def pay_stars(call: types.CallbackQuery):
        await call.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.", show_alert=True)
    
    @dp.callback_query_handler(lambda c: c.data == "pay_crypto")
    async def pay_crypto(call: types.CallbackQuery):
        text = f"üíé <b>–ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç—ë–∂</b>\n\n–ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.\n\n{SUPPORT_URL}"
        await call.message.edit_text(text, reply_markup=pay_kb())
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "pay_code")
    async def pay_code(call: types.CallbackQuery):
        USER_STATES[call.from_user.id] = {"mode": "waiting_promo"}
        text = "üéü –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        await call.message.edit_text(text, reply_markup=pay_kb())
        await call.answer()
    
    @dp.message_handler(lambda m: USER_STATES.get(m.from_user.id, {}).get("mode") == "waiting_promo")
    async def handle_promo(message: types.Message):
        await grant_access(message.from_user.id)
        USER_STATES.pop(message.from_user.id, None)
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–ù–∞–∂–º–∏ /start")
    
    # ==================== REFERRAL ====================
    @dp.callback_query_handler(lambda c: c.data == "menu_ref")
    async def menu_ref(call: types.CallbackQuery):
        text = "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª–∫–∞</b>\n\n50% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n–í—ã–≤–æ–¥: –∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ Stars\n–ú–∏–Ω–∏–º—É–º: $20"
        await call.message.edit_text(text, reply_markup=ref_kb())
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "ref_link")
    async def ref_link(call: types.CallbackQuery):
        from aiogram import Bot
        bot = Bot.get_current()
        me = await bot.get_me()
        link = f"https://t.me/{me.username}?start={call.from_user.id}"
        text = f"üîó <b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n\n<code>{link}</code>\n\n–î–µ–ª–∏—Å—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 50%!"
        await call.message.edit_text(text, reply_markup=ref_kb(), disable_web_page_preview=True)
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "ref_balance")
    async def ref_balance_handler(call: types.CallbackQuery):
        balance = await get_user_balance(call.from_user.id)
        refs = await get_user_refs_count(call.from_user.id)
        
        text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n\n–î–æ—Å—Ç—É–ø–Ω–æ: ${balance:.2f}\n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs}\n\n–ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: $20"
        await call.message.edit_text(text, reply_markup=ref_kb())
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data in ["ref_withdraw_crypto", "ref_withdraw_stars"])
    async def ref_withdraw(call: types.CallbackQuery):
        if call.data == "ref_withdraw_crypto":
            text = "üíé <b>–í—ã–≤–æ–¥ –∫—Ä–∏–ø—Ç—ã</b>\n\n–§–æ—Ä–º–∞—Ç:\n<code>/withdraw USDT TRC20 –∞–¥—Ä–µ—Å —Å—É–º–º–∞</code>"
        else:
            text = "‚≠ê <b>–í—ã–≤–æ–¥ Stars</b>\n\n–§–æ—Ä–º–∞—Ç:\n<code>/withdraw_stars —Å—É–º–º–∞</code>"
        await call.message.edit_text(text, reply_markup=ref_kb())
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "ref_guide")
    async def ref_guide(call: types.CallbackQuery):
        text = "üìñ <b>–ì–∞–π–¥ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤</b>\n\n1. –ü–æ–ª—É—á–∏ —Å–≤–æ—é —Å—Å—ã–ª–∫—É\n2. –î–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏\n3. –ü–æ–ª—É—á–∞–π 50% —Å –ø–æ–¥–ø–∏—Å–æ–∫\n4. –í—ã–≤–æ–¥–∏ –æ—Ç $20"
        await call.message.edit_text(text, reply_markup=ref_kb())
        await call.answer()
    
    @dp.message_handler(commands=["withdraw"])
    async def cmd_withdraw(message: types.Message):
        parts = message.text.split()
        if len(parts) != 5:
            await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /withdraw USDT TRC20 –∞–¥—Ä–µ—Å —Å—É–º–º–∞")
            return
        
        try:
            amount = float(parts[4])
        except:
            await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        if amount < 20:
            await message.reply("‚ùå –ú–∏–Ω–∏–º—É–º $20")
            return
        
        await message.reply(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {amount} {parts[1]}\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–æ 24—á)")
        
        from aiogram import Bot
        bot = Bot.get_current()
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üí∏ –í—ã–≤–æ–¥\nUser: {message.from_user.id}\n{parts[1]} {parts[2]}\n–ê–¥—Ä–µ—Å: {parts[3]}\n–°—É–º–º–∞: {amount}"
                )
            except:
                pass
    
    @dp.message_handler(commands=["withdraw_stars"])
    async def cmd_withdraw_stars(message: types.Message):
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /withdraw_stars —Å—É–º–º–∞")
            return
        
        try:
            amount = int(parts[1])
        except:
            await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        if amount < 20:
            await message.reply("‚ùå –ú–∏–Ω–∏–º—É–º 20 Stars")
            return
        
        await message.reply(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {amount} Stars –ø—Ä–∏–Ω—è—Ç–∞\n\n–û–∂–∏–¥–∞–π—Ç–µ (–¥–æ 24—á)")
    
    # ==================== GUIDE ====================
    @dp.callback_query_handler(lambda c: c.data == "menu_guide")
    async def menu_guide(call: types.CallbackQuery):
        lang = await get_user_lang(call.from_user.id)
        
        if lang == "ru":
            text = "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n\n"
            text += "<b>–®–∞–≥ 1:</b> –û–ø–ª–∞—Ç–∏ –¥–æ—Å—Ç—É–ø\n"
            text += "<b>–®–∞–≥ 2:</b> –í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—ã (–¥–æ 10)\n"
            text += "<b>–®–∞–≥ 3:</b> –ü–æ–ª—É—á–∞–π —Å–∏–≥–Ω–∞–ª—ã\n\n"
            text += "<b>–í –∫–∞–∂–¥–æ–º —Å–∏–≥–Ω–∞–ª–µ:</b>\n"
            text += "‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞\n‚Ä¢ üéØ TP1/TP2/TP3\n‚Ä¢ üõ° Stop Loss\n‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞\n‚Ä¢ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞\n\n"
            text += "<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç"
        else:
            text = "üìñ <b>Guide</b>\n\n"
            text += "<b>Step 1:</b> Pay for access\n"
            text += "<b>Step 2:</b> Select coins (up to 10)\n"
            text += "<b>Step 3:</b> Receive signals\n\n"
            text += "<b>Each signal includes:</b>\n"
            text += "‚Ä¢ Entry price\n‚Ä¢ üéØ TP1/TP2/TP3\n‚Ä¢ üõ° Stop Loss\n‚Ä¢ Entry reasons\n‚Ä¢ Signal strength\n\n"
            text += "<b>‚ö†Ô∏è Important:</b> This is not financial advice"
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(t(lang, "btn_back"), callback_data="back_main"))
        
        try:
            await call.message.edit_text(text, reply_markup=kb)
        except:
            await call.message.answer(text, reply_markup=kb)
        await call.answer()
    
    # ==================== ADMIN ====================
    @dp.callback_query_handler(lambda c: c.data == "menu_admin")
    async def menu_admin(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        await call.message.edit_text("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_kb())
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "adm_stats")
    async def adm_stats(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            return
        
        total = await get_users_count()
        paid = await get_paid_users_count()
        active = await get_active_users_count()
        
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüë• –í—Å–µ–≥–æ: {total}\nüíé –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö: {paid}\nüìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}"
        await call.message.edit_text(text, reply_markup=admin_kb())
        await call.answer()
    
    @dp.callback_query_handler(lambda c: c.data == "adm_broadcast")
    async def adm_broadcast(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            return
        USER_STATES[call.from_user.id] = {"mode": "admin_broadcast"}
        await call.message.edit_text("üì¢ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=admin_kb())
        await call.answer()
    
    @dp.message_handler(lambda m: USER_STATES.get(m.from_user.id, {}).get("mode") == "admin_broadcast")
    async def handle_broadcast(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        
        text = message.html_text
        users = await get_all_user_ids()
        
        from aiogram import Bot
        from config import BATCH_SEND_DELAY
        bot = Bot.get_current()
        
        sent = 0
        for user_id in users:
            if await send_message_safe_local(bot, user_id, text, disable_web_page_preview=True):
                sent += 1
            await asyncio.sleep(BATCH_SEND_DELAY)
        
        USER_STATES.pop(message.from_user.id, None)
        await message.reply(f"‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {sent}/{len(users)}")
    
    @dp.callback_query_handler(lambda c: c.data == "adm_grant")
    async def adm_grant(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            return
        USER_STATES[call.from_user.id] = {"mode": "admin_grant"}
        await call.message.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=admin_kb())
        await call.answer()
    
    @dp.message_handler(lambda m: USER_STATES.get(m.from_user.id, {}).get("mode") == "admin_grant")
    async def handle_grant(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        
        try:
            uid = int(message.text.strip())
        except:
            await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        await grant_access(uid)
        USER_STATES.pop(message.from_user.id, None)
        await message.reply(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω: {uid}")
        
        from aiogram import Bot
        bot = Bot.get_current()
        try:
            await bot.send_message(uid, "üéâ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–ù–∞–∂–º–∏ /start")
        except:
            pass
    
    @dp.callback_query_handler(lambda c: c.data == "adm_give")
    async def adm_give(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            return
        USER_STATES[call.from_user.id] = {"mode": "admin_give_uid"}
        await call.message.edit_text("üí∞ –û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=admin_kb())
        await call.answer()
    
    @dp.message_handler(lambda m: USER_STATES.get(m.from_user.id, {}).get("mode") == "admin_give_uid")
    async def handle_give_uid(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        try:
            uid = int(message.text.strip())
        except:
            await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        USER_STATES[message.from_user.id] = {"mode": "admin_give_amount", "target_id": uid}
        await message.reply("–û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É")
    
    @dp.message_handler(lambda m: USER_STATES.get(m.from_user.id, {}).get("mode") == "admin_give_amount")
    async def handle_give_amount(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        try:
            amount = float(message.text.strip())
        except:
            await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        uid = USER_STATES[message.from_user.id]["target_id"]
        await add_balance(uid, amount)
        
        USER_STATES.pop(message.from_user.id, None)
        await message.reply(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount:.2f} ‚Üí {uid}")