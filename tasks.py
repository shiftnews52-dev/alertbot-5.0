"""
tasks.py - –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—Å–±–æ—Ä —Ü–µ–Ω, –∞–Ω–∞–ª–∏–∑, —Ä–∞—Å—Å—ã–ª–∫–∞)
"""
import time
import asyncio
import logging
from collections import defaultdict
import httpx
from aiogram import Bot
from aiogram.utils.exceptions import RetryAfter, TelegramAPIError

from config import (
    CHECK_INTERVAL, DEFAULT_PAIRS, 
    MAX_SIGNALS_PER_DAY, SIGNAL_COOLDOWN,
    BATCH_SEND_SIZE, BATCH_SEND_DELAY
)
from database import (
    get_all_tracked_pairs, get_pairs_with_users,
    count_signals_today, log_signal
)
from indicators import (
    CANDLES, PRICE_CACHE, fetch_price, analyze_signal
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è cooldown —Å–∏–≥–Ω–∞–ª–æ–≤
LAST_SIGNALS = {}

# ==================== HELPER FUNCTIONS ====================
async def send_message_safe(bot: Bot, user_id: int, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit"""
    try:
        await bot.send_message(user_id, text, **kwargs)
        return True
    except RetryAfter as e:
        await asyncio.sleep(e.timeout)
        return await send_message_safe(bot, user_id, text, **kwargs)
    except TelegramAPIError:
        return False

# ==================== TASKS ====================
async def price_collector(bot: Bot):
    """–°–±–æ—Ä —Ü–µ–Ω —Å Binance"""
    logger.info("Price collector started")
    async with httpx.AsyncClient() as client:
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã
                pairs = await get_all_tracked_pairs()
                pairs = list(set(pairs + DEFAULT_PAIRS))
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã
                ts = time.time()
                for pair in pairs:
                    price_data = await fetch_price(client, pair)
                    if price_data:
                        price, volume = price_data
                        CANDLES.add_price(pair, price, volume, ts)
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
                PRICE_CACHE.clear_old()
                
            except Exception as e:
                logger.error(f"Price collector error: {e}")
            
            await asyncio.sleep(CHECK_INTERVAL)

async def signal_analyzer(bot: Bot):
    """–ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("Signal analyzer started")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            rows = await get_pairs_with_users()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–º
            pairs_users = defaultdict(list)
            for row in rows:
                pairs_users[row["pair"]].append(row["user_id"])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É
            now = time.time()
            for pair, users in pairs_users.items():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å
                signals_today = await count_signals_today(pair)
                if signals_today >= MAX_SIGNALS_PER_DAY:
                    continue
                
                signal = analyze_signal(pair)
                if not signal:
                    continue
                
                side = signal["side"]
                key = (pair, side)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
                if now - LAST_SIGNALS.get(key, 0) < SIGNAL_COOLDOWN:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                emoji = "üìà" if side == "LONG" else "üìâ"
                text = f"{emoji} <b>–°–ò–ì–ù–ê–õ</b> ({signal['score']}/100)\n\n"
                text += f"<b>–ú–æ–Ω–µ—Ç–∞:</b> {pair}\n"
                text += f"<b>–í—Ö–æ–¥:</b> {side} @ <code>{signal['price']:.8f}</code>\n\n"
                
                # 3 —É—Ä–æ–≤–Ω—è Take Profit
                text += f"üéØ <b>TP1:</b> <code>{signal['take_profit_1']:.8f}</code> (+{signal['tp1_percent']:.2f}%) [15% –ø–æ–∑–∏—Ü–∏–∏]\n"
                text += f"üéØ <b>TP2:</b> <code>{signal['take_profit_2']:.8f}</code> (+{signal['tp2_percent']:.2f}%) [40% –ø–æ–∑–∏—Ü–∏–∏]\n"
                text += f"üéØ <b>TP3:</b> <code>{signal['take_profit_3']:.8f}</code> (+{signal['tp3_percent']:.2f}%) [80% –ø–æ–∑–∏—Ü–∏–∏]\n\n"
                
                text += f"üõ° <b>SL:</b> <code>{signal['stop_loss']:.8f}</code> (-{signal['sl_percent']:.2f}%)\n\n"
                text += "<b>üí° –ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                for reason in signal["reasons"]:
                    text += f"‚Ä¢ {reason}\n"
                text += f"\n‚è∞ {time.strftime('%H:%M:%S')}"
                
                # –ë–∞—Ç—á–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
                sent_count = 0
                for i, user_id in enumerate(users):
                    if await send_message_safe(bot, user_id, text):
                        await log_signal(user_id, pair, side, signal["price"], signal["score"])
                        sent_count += 1
                    
                    if (i + 1) % BATCH_SEND_SIZE == 0:
                        await asyncio.sleep(1)
                    else:
                        await asyncio.sleep(BATCH_SEND_DELAY)
                
                LAST_SIGNALS[key] = now
                logger.info(f"Signal sent: {pair} {side} to {sent_count} users")
                
        except Exception as e:
            logger.error(f"Signal analyzer error: {e}")
        
        await asyncio.sleep(30)